#!/usr/bin/env bash
set -e

usage()
{
	cat <<!EOF
Usage: $1 ROOTFS --arch=ARCH --interpreter-path=QEMU \
[--include=INCLUDE] [--exclude=EXCLUDE] [--variant=VARIANT] SUITE MIRROR

    --arch is debian architecture
    --interpreter-path is path to the interpreter to copy to rootfs
    --include is the list of package to add to debootstrap
    --exclude is the list of package to remove from debootstrap
    --variant is the variant of debootstrap
!EOF
}

find_interpreter() {
	qemu=$(basename "$1")

	if [ ! -d /proc/sys/fs/binfmt_misc/ ] ; then
		return 1
	fi
	for file in /proc/sys/fs/binfmt_misc/* ; do
		if [ "$file" = "/proc/sys/fs/binfmt_misc/register" -o \
		     "$file" = "/proc/sys/fs/binfmt_misc/status" ] ; then
			continue
		fi
		interpreter_path=$(sed -n "/^interpreter/s/interpreter \([^[:space:]]*\)/\1/p" "$file")
		interpreter=$(basename $interpreter_path)

		if [ "$qemu" = "$interpreter" ] ; then
			echo "$interpreter_path"
			return 0
		fi
	done
	return 1
}

rootfsDir="$1"
shift

optTemp=$(getopt -o 'hI:a:i:e:v' -l 'help,interpreter-path:,arch:,include:,exclude:,variant:' -- "$@")
eval set -- "$optTemp"
unset optTemp

while true; do
    echo $1
	case "$1" in
	-I|--interpreter-path)
		shift
		qemu="$1"
		;;
	-a|--arch)
		shift
		arch="$1"
		;;
	-i|--include)
		shift
		include="$1"
		;;
	-e|--exclude)
		shift
		exclude="$1"
		;;
	-v|--variant)
		shift
		variant="$1"
		;;
	-h|--help)
		usage $(basename $0)
		exit 0
		;;
	*)
		break
		;;
	esac
        shift
done

if [ "$arch" = "" -o "$qemu" = "" ]; then
	echo "ERROR: missing parameter" 1>&2
        usage $(basename $0)
	exit 1
fi

interpreter_path=$(find_interpreter "$qemu")
if [ $? -ne 0 ] ; then
	echo "ERROR: no binfmt interpreter using $(basename $qemu)" 1>&2
	exit 1
fi

shift
suite="$1"
shift

debootstrapOpt=()
debootstrapOpt+=("--no-check-gpg")
debootstrapOpt+=("--foreign")
debootstrapOpt+=("--arch=$arch")
if [ "$include" != "" ]; then
	debootstrapOpt+=("--include=$include")
fi
if [ "$exclude" != "" ]; then
	debootstrapOpt+=("--exclude=$exclude")
fi
if [ "$variant" != "" ]; then
	debootstrapOpt+=("--variant=$variant")
fi

(
	set -x
	debootstrap "${debootstrapOpt[@]}" "$suite" "$rootfsDir" "$@"

	# adding qemu binary
	if ! cp "$qemu" "$rootfsDir/$interpreter_path" ; then
		echo "ERROR: failed to copy $qemu to $rootfsDir/$interpreter_path" 1>&2
		exit 1
	fi

	# debian bootstrap second stage
	chroot "$rootfsDir" debootstrap/debootstrap --second-stage
)

# now for some Docker-specific tweaks

# prevent init scripts from running during install/update
echo >&2 "+ cat > '$rootfsDir/usr/sbin/policy-rc.d'"
cat > "$rootfsDir/usr/sbin/policy-rc.d" <<'EOF'
#!/bin/sh
exit 101
EOF
chmod +x "$rootfsDir/usr/sbin/policy-rc.d"

# prevent upstart scripts from running during install/update
(
	set -x
	chroot "$rootfsDir" dpkg-divert --local --rename --add /sbin/initctl
	ln -sf /bin/true "$rootfsDir/sbin/initctl"
)

# shrink the image, since apt makes us fat (wheezy: ~157.5MB vs ~120MB)
( set -x; chroot "$rootfsDir" apt-get clean )

# Ubuntu 10.04 sucks... :)
if strings "$rootfsDir/usr/bin/dpkg" | grep -q unsafe-io; then
	# force dpkg not to call sync() after package extraction (speeding up installs)
	echo >&2 "+ echo force-unsafe-io > '$rootfsDir/etc/dpkg/dpkg.cfg.d/docker-apt-speedup'"
	echo 'force-unsafe-io' > "$rootfsDir/etc/dpkg/dpkg.cfg.d/docker-apt-speedup"
fi

if [ -d "$rootfsDir/etc/apt/apt.conf.d" ]; then
	# _keep_ us lean by effectively running "apt-get clean" after every install
	aptGetClean='"rm -f /var/cache/apt/archives/*.deb /var/cache/apt/archives/partial/*.deb /var/cache/apt/*.bin || true";'
	echo >&2 "+ cat > '$rootfsDir/etc/apt/apt.conf.d/docker-clean'"
	cat > "$rootfsDir/etc/apt/apt.conf.d/docker-clean" <<-EOF
		DPkg::Post-Invoke { ${aptGetClean} };
		APT::Update::Post-Invoke { ${aptGetClean} };

		Dir::Cache::pkgcache "";
		Dir::Cache::srcpkgcache "";
	EOF

	# remove apt-cache translations for fast "apt-get update"
	echo >&2 "+ cat > '$rootfsDir/etc/apt/apt.conf.d/docker-no-languages'"
	echo 'Acquire::Languages "none";' > "$rootfsDir/etc/apt/apt.conf.d/docker-no-languages"
fi

if [ -z "$DONT_TOUCH_SOURCES_LIST" ]; then
	# tweak sources.list, where appropriate
	lsbDist=
	if [ -z "$lsbDist" -a -r "$rootfsDir/etc/os-release" ]; then
		lsbDist="$(. "$rootfsDir/etc/os-release" && echo "$ID")"
	fi
	if [ -z "$lsbDist" -a -r "$rootfsDir/etc/lsb-release" ]; then
		lsbDist="$(. "$rootfsDir/etc/lsb-release" && echo "$DISTRIB_ID")"
	fi
	if [ -z "$lsbDist" -a -r "$rootfsDir/etc/debian_version" ]; then
		lsbDist='Debian'
	fi
	case "$lsbDist" in
		debian|Debian)
			# updates and security!
			if [ "$suite" != 'sid' -a "$suite" != 'unstable' ]; then
				(
					set -x
					sed -i "p; s/ $suite main$/ ${suite}-updates main/" "$rootfsDir/etc/apt/sources.list"
					echo "deb http://security.debian.org $suite/updates main" >> "$rootfsDir/etc/apt/sources.list"
				)
			fi
			;;
		ubuntu|Ubuntu)
			# add the universe, updates, and security repositories
			(
				set -x
				sed -i "
					s/ $suite main$/ $suite main universe/; p;
					s/ $suite main/ ${suite}-updates main/; p;
					s/ $suite-updates main/ ${suite}-security main/
				" "$rootfsDir/etc/apt/sources.list"
			)
			;;
		tanglu|Tanglu)
			# add the updates repository
			if [ "$suite" != 'devel' ]; then
				(
					set -x
					sed -i "p; s/ $suite main$/ ${suite}-updates main/" "$rootfsDir/etc/apt/sources.list"
				)
			fi
			;;
		steamos|SteamOS)
			# add contrib and non-free
			(
				set -x
				sed -i "s/ $suite main$/ $suite main contrib non-free/" "$rootfsDir/etc/apt/sources.list"
			)
			;;
	esac
fi

# make sure we're fully up-to-date, too
(
	set -x
	chroot "$rootfsDir" apt-get update
	chroot "$rootfsDir" apt-get dist-upgrade -y
)
